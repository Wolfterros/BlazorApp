@inject Blazored.LocalStorage.ILocalStorageService localStore
@page "/Counter"
@using BlazorTodoApp.Models
@using Newtonsoft.Json

<div class="todo-container">

    <h1>To-Do List</h1>
    <div class="todo-input">
        <input type="text" @bind="todoInput" />
        <button @onclick="AddTodo">Add</button>


    </div>

    @for (int i = 0; i < todos.Count; i++)
    {
        var index = i;
        var todo = todos[i];
        <div class="todo-item">
            <div class="@(todo.IsComplete ? "todo-item__text complete" : "todo-item__text ")"
                 @onclick="@(() => MarkAsComplete(todo))">
                @todo.Title
            </div>
            <div class="todo-item__close" @onclick="@(() => RemoveTodo(index))">&times;</div>
        </div>
    }

</div>

@code{

    public string todoInput { get; set; }
    public List<Todo> todos = new List<Todo>();

    protected override async Task OnInitializedAsync()
    {
        var storedTodos = await localStore.GetItemAsync<string>("SavedTodos");
        var parsedTodos = JsonConvert.DeserializeObject<List<Todo>>(storedTodos);
        todos = parsedTodos;
    }

    public void AddTodo()
    {
        var todo = new Todo();
        todo.Title = todoInput;
        todos.Add(todo);
        todoInput = "";
        SaveTodos();
    }

    public void RemoveTodo(int index)
    {
        todos.RemoveAt(index);
        SaveTodos();
    }

    public void MarkAsComplete(Todo todo)
    {
        todo.IsComplete = !todo.IsComplete;
        SaveTodos();
    }


    public void SaveTodos()
    {
        localStore.SetItemAsync("SavedTodos", JsonConvert.SerializeObject(todos));
    }

}